"""
Name:  Saqifur Rahman

Email: saqifur.rahman84@myhunter.cuny.edu

Title: High School Matriculation & Attendance Based on Average Household Income of Neighborhood

Resources: 1. School Progress Reports (2010-11) https://data.cityofnewyork.us/Education/2010-2011-School-Progress-Reports-All-Schools/yig9-9zum
2. Average Household Incomes by School District (2010) https://data.cccnewyork.org/data/table/66/median-incomes#66/107/8/abbr/u
3. School Attendance & Enrolment by School District (2010-11) https://data.cityofnewyork.us/Education/2010-2011-School-Attendance-and-Enrollment-Statist/7z8d-msnt
4. Graduation Rates by School District (2011) https://data.cccnewyork.org/data/map/121/graduation-rate#121/258/5/205/99/a/a
5. School Districts GeoJSON Data (2010-11) https://data.cityofnewyork.us/Education/School-Districts/r8nu-ymqj

URL: https://sites.google.com/view/ds-project/datasets
"""

"""DS_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TkUA8E742HWZAIV2pMgVcu2ZBtAn3uWy
"""

## Install Required Libraries
'''' !pip install pandasql plotly==5.4.0 '''

import pandas as pd
import pandasql as psql
import json
import plotly

"""
Dataset 1: 2010_-_2011_School_Progress_Reports.csv

- CSV File
- Peer indexes & Overall Scores are calculated differently depending on School Level.
- Schools are only compared to other schools in the same School Level.
"""

progress_reports = pd.read_csv("https://drive.google.com/file/d/1P3SfhC2OXPF72JM0N5rdcCsTZC-1I25q/view?usp=sharing")

## Drop rows with NULL/NA values 
progress_reports = progress_reports.dropna(subset=["2010-2011_OVERALL_GRADE", "2010-2011_OVERALL_SCORE"])

## Aggregate Avg. Overall Grade by School District
agg_score = progress_reports.groupby("DISTRICT")[["2010-2011_OVERALL_SCORE"]].mean()
agg_score = agg_score.rename(columns={"2010-2011_OVERALL_SCORE" : "Avg_2010-2011_OVERALL_SCORE", "School District": "District"})
print(agg_score)

"""
Dataset 2: Household Incomes - District(2010-11) - nycd.csv

- CSV File
- Average Household Income (USD) calculated for each school district for the year 2010.
"""

avg_household_incomes = pd.read_csv("https://drive.google.com/file/d/1P3SfhC2OXPF72JM0N5rdcCsTZC-1I25q/view?usp=sharing")

## Drop rows with NULL/NA values
avg_household_incomes = avg_household_incomes.dropna()

## Convert Incomes (Srting) to Float values
bad_chars = ['$',',']
for i in avg_household_incomes.index:
    income = avg_household_incomes["All Households"][i]
    income = ''.join(i for i in income if not i in bad_chars)
    avg_household_incomes["All Households"][i] = float(income)

## Aggregate Avg. Household Income School District wise
avg_household_incomes["All Households"] = pd.to_numeric(avg_household_incomes["All Households"], downcast="float")
agg_incomes = avg_household_incomes.groupby("School District")[["All Households"]].mean()
for i in agg_incomes.index: agg_incomes["All Households"][i] = round(agg_incomes["All Households"][i], 2) 
agg_incomes = agg_incomes.rename(columns={"All Households": "Avg. Household Incomes"})
print(agg_incomes)

"""
Dataset 3: Attendance_Enrollment-District(2010-11).csv

- CSV File
- Attendance and Enrollment statistics broken down by School District.
"""

attendance_enrollment = pd.read_csv("https://drive.google.com/file/d/13cCWqGohcEYbv0b2AUKiN1zn2WT7P_D4/view?usp=sharing")

## Drop rows with NULL/NA values
attendance_enrollment = attendance_enrollment.dropna()

## Convert District (String) to Int values
for i in attendance_enrollment.index:
    district = attendance_enrollment["District"][i]
    attendance_enrollment["District"][i] = int(district.split()[1])
print(attendance_enrollment)

"""
Dataset 4: Graduation_Rates(2011).csv

- CSV File
- Graduation Rates of students passed out from 2011, graduated after 4 & 6 years respectively. 
"""

graduation_rates = pd.read_csv("https://drive.google.com/file/d/13cCWqGohcEYbv0b2AUKiN1zn2WT7P_D4/view?usp=sharing")

## Drop rows with NULL/NA values
graduation_rates = graduation_rates.dropna()

## Convert District (String) to Int values
for i in graduation_rates.index:
    graduation_rates["Within 4 years"][i] = float(str(graduation_rates["Within 4 years"][i]).replace("%",""))
    graduation_rates["Within 6 years"][i] = float(str(graduation_rates["Within 6 years"][i]).replace("%",""))
print(graduation_rates)

"""Joining Aggregated dataframes having common "District" column"""

query1 = "SELECT * FROM attendance_enrollment JOIN agg_score ON attendance_enrollment.District = agg_score.DISTRICT"
joined_df = psql.sqldf(query1).drop(["DISTRICT"], axis=1)
query2 = "SELECT * FROM joined_df JOIN agg_incomes ON joined_df.District = agg_incomes.[School District]"
joined_df = psql.sqldf(query2).drop(["School District"], axis=1)
query3 = "SELECT * FROM joined_df JOIN graduation_rates ON joined_df.District = graduation_rates.[Rank / Location]"
joined_df = psql.sqldf(query3).drop(["Rank / Location"], axis=1)
print(joined_df)
joined_df.to_csv("aggreagted_data.csv", index=False)

"""
Geospatial Visualization

Dataset 5: School Districts.geojson

- GeoJSON File
- GIS data: Boundaries of School Districts.
"""

import plotly.express as px

df = pd.read_csv("https://drive.google.com/file/d/13cCWqGohcEYbv0b2AUKiN1zn2WT7P_D4/view?usp=sharing")
nycmap = json.load(open("https://drive.google.com/file/d/13cCWqGohcEYbv0b2AUKiN1zn2WT7P_D4/view?usp=sharing"))

columns = ["YTD % Attendance (Avg)", "YTD Enrollment(Avg)", "Avg_2010-2011_OVERALL_SCORE", "Avg. Household Incomes", "Within 4 years", "Within 6 years"]
for col in columns:
    fig = px.choropleth_mapbox(
        df,
        geojson=nycmap,
        locations="District",
        featureidkey="properties.school_dist",
        color=col,
        color_continuous_scale="viridis",
        mapbox_style="carto-positron",
        zoom=9, center={"lat": 40.7, "lon": -73.9},
        opacity=0.7,
        hover_name="Name",
        title=f"{col} (School District wise)"
    )

    fig.show()
    plotly.offline.plot(fig, filename = f'/content/drive/MyDrive/Project/{col}.html')

"""
Correlation betwen **Avg Household Incomes** and **Enrollment, Attendance, Overall Score, Graduation Rate**

findHighestCorr(colName,colLst,df): This function takes three inputs:
1. colName: a column name of the specified DataFrame,
2. colList: a list of column names of the specified DataFrame. It must be a list and assumed to be non-empty. Can include colName, and
3. df: a DataFrame including the specified columns.

The function computes the correlation coefficient between df[colName] and each column specified in colList, and returns the name and the correlation coefficient for the column from the list with the highest absolute value.
"""

# Used from Program 23
def findCorr(colName,colLst,df,method):
    result = {}
    for col in colLst:
        result[col] = df[col].corr(df[colName], method=method)
    return result

colLst = ["YTD % Attendance (Avg)", "YTD Enrollment(Avg)", "Avg_2010-2011_OVERALL_SCORE", "Within 4 years", "Within 6 years"]
print(findCorr("Avg. Household Incomes", colLst, joined_df, "pearson"))
print(findCorr("Avg. Household Incomes", colLst, joined_df, "kendall"))
print(findCorr("Avg. Household Incomes", colLst, joined_df, "spearman"))

"""
Correlation betwen **Overall Score** and **Enrollment, Attendance, Graduation within 4 & 6 years**
"""

# Correlation
colLst = ["YTD % Attendance (Avg)", "YTD Enrollment(Avg)", "Within 4 years", "Within 6 years"]
print(findCorr("Avg_2010-2011_OVERALL_SCORE", colLst, joined_df, "pearson"))
print(findCorr("Avg_2010-2011_OVERALL_SCORE", colLst, joined_df, "kendall"))
print(findCorr("Avg_2010-2011_OVERALL_SCORE", colLst, joined_df, "spearman"))

"""
**Correlation Matrix**
"""

joined_df.corr(method ='pearson')

joined_df.corr(method ='kendall')

joined_df.corr(method ='spearman')